<%= f.label a.keys.first, class: "form-control-label #{required?(f.object, a).present? ? 'required' : ''}" %>
<%= render 'slash_admin/shared/tooltip', a: a %>

<input type="text" class="form-control" id="<%= f.options[:html][:id] %>_search" />
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= a[a.keys.first.to_sym][:google_api_key] %>&libraries=places&callback=initMap&language=<%= I18n.locale %>">
</script>
<div class="google-map-container" id="<%= f.options[:html][:id] %>_map" style="width:100%; min-height:350px"></div>
<%= f.hidden_field a.keys.first, class: 'form-control', id: f.options[:html][:id] + '_' + a.keys.first.to_s, required: required?(f.object, a), value: f.object.send(a.keys.first.to_s).to_json %>
<script type="text/javascript">
  var map = {};
  var markers;
  function initMap() {
    markers = [];
    var myOptions = {
      zoom: <%= a[a.keys.first.to_sym][:default_zoom] %>,
      center: new google.maps.LatLng(<%= a[a.keys.first.to_sym][:default_latitude] %>, <%= a[a.keys.first.to_sym][:default_longitude] %>),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      scrollwheel: false
    };
    map = new google.maps.Map(document.getElementById("<%= f.options[:html][:id] %>_map"), myOptions);
    <% if f.object.send(a.keys.first.to_s).present? %>
      document.getElementById("<%= f.options[:html][:id] %>_search").value = "<%= f.object.send(a.keys.first.to_s)['formatted_address'] %>";
    <% else %>
      document.getElementById("<%= f.options[:html][:id] %>_search").value = '';
    <% end  %>
    initializeAutocomplete('<%= f.options[:html][:id] %>_search');
    function initializeAutocomplete(id) {
      var element = document.getElementById(id);
      if (element) {
        var autocomplete = new google.maps.places.Autocomplete(element, {types: ['geocode']});
        google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
      }
    }
    updateMarker();
  }
  function onPlaceChanged() {
    cleanAllMarkers();
    var final_datas = {};
    var place = this.getPlace();
    if (place.length === 0) {
      return;
    }
    var location = place.geometry.location;
    final_datas.location = {
      lat: location.lat(),
      lng: location.lng()
    };
    final_datas.formatted_address = place.formatted_address;
    for (var i in place.address_components) {
      var component = place.address_components[i];
      for (var j in component.types) {
        final_datas[component.types[j]] = component.long_name;
      }
    }
    document.getElementById("<%= f.options[:html][:id] + '_' + a.keys.first.to_s %>").value = JSON.stringify(final_datas);
    updateMarker();
  }
  function updateMarker() {
    if (document.getElementById("<%= f.options[:html][:id] + '_' + a.keys.first.to_s %>").value.length > 0) {
      var json = JSON.parse(document.getElementById("<%= f.options[:html][:id] + '_' + a.keys.first.to_s %>").value);
      if (json.location) {
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(json.location.lat, json.location.lng),
          map: map
        });
        markers.push(marker);
        map.setCenter(new google.maps.LatLng(json.location.lat, json.location.lng));
      }
    }
  }
  function cleanAllMarkers() {
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
    }
  }
</script>
